# Docker Compose file for enhanced microservices architecture

services:
  # MongoDB - Primary database for most services
  mongodb:
    image: mongo:7.0
    container_name: securehealth-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - securehealth-network
    environment:
      MONGO_INITDB_DATABASE: securehealth
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL - For Auth and Blockchain services
  postgres:
    image: postgres:15
    container_name: securehealth-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: securehealth
      POSTGRES_USER: securehealth
      POSTGRES_PASSWORD: securehealth123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - securehealth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U securehealth"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - For caching and session management
  redis:
    image: redis:7-alpine
    container_name: securehealth-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass securehealth123 --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - securehealth-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Kafka - For event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: securehealth-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - securehealth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: securehealth-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - securehealth-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch - For audit logs and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: securehealth-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - securehealth-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO - Object storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: securehealth-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: securehealth
      MINIO_ROOT_PASSWORD: securehealth123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - securehealth-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Hospital Service - Already implemented
  hospital-service:
    build:
      context: ./services/hospital-service
      dockerfile: Dockerfile
    container_name: securehealth-hospital-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      MONGODB_URI: mongodb://mongodb:27017/hospital-service
      JWT_SECRET: your-jwt-secret-key-for-development
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
      REDIS_URL: redis://:securehealth123@redis:6379
      KAFKA_BROKERS: kafka:9092
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - securehealth-network
    volumes:
      - ./services/hospital-service:/app
      - /app/node_modules
    command: npm run start:dev

  # Notification Service - New service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: securehealth-notification-service
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      PORT: 3006
      MONGODB_URI: mongodb://admin:securehealth123@mongodb:27017/notification-service?authSource=admin
      JWT_SECRET: your-jwt-secret-key-for-development
      REDIS_URL: redis://:securehealth123@redis:6379
      KAFKA_BROKERS: kafka:9092
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      TWILIO_ACCOUNT_SID: your-twilio-sid
      TWILIO_AUTH_TOKEN: your-twilio-token
      FIREBASE_PROJECT_ID: your-firebase-project
      FIREBASE_PRIVATE_KEY: your-firebase-key
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - securehealth-network
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    command: npm run start:dev

  # Consent Service - New service
  consent-service:
    build:
      context: ./services/consent-service
      dockerfile: Dockerfile
    container_name: securehealth-consent-service
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: development
      PORT: 3007
      MONGODB_URI: mongodb://admin:securehealth123@mongodb:27017/consent-service?authSource=admin
      JWT_SECRET: your-jwt-secret-key-for-development
      REDIS_URL: redis://:securehealth123@redis:6379
      KAFKA_BROKERS: kafka:9092
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - securehealth-network
    volumes:
      - ./services/consent-service:/app
      - /app/node_modules
    command: npm run start:dev

  # Audit Service - New service
  audit-service:
    build:
      context: ./services/audit-service
      dockerfile: Dockerfile
    container_name: securehealth-audit-service
    ports:
      - "3008:3008"
    environment:
      NODE_ENV: development
      PORT: 3008
      MONGODB_URI: mongodb://admin:securehealth123@mongodb:27017/audit-service?authSource=admin
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JWT_SECRET: your-jwt-secret-key-for-development
      REDIS_URL: redis://:securehealth123@redis:6379
      KAFKA_BROKERS: kafka:9092
    depends_on:
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - securehealth-network
    volumes:
      - ./services/audit-service:/app
      - /app/node_modules
    command: npm run start:dev

  # Frontend - Enhanced with new features
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: securehealth-frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_HOSPITAL_API_URL: http://localhost:3003
      NEXT_PUBLIC_NOTIFICATION_API_URL: http://localhost:3006
      NEXT_PUBLIC_CONSENT_API_URL: http://localhost:3007
      NEXT_PUBLIC_AUDIT_API_URL: http://localhost:3008
    depends_on:
      - hospital-service
      - notification-service
      - consent-service
      - audit-service
    networks:
      - securehealth-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # API Gateway - For routing and load balancing
  api-gateway:
    image: kong:3.4
    container_name: securehealth-api-gateway
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml:ro
    networks:
      - securehealth-network
    depends_on:
      - hospital-service
      - notification-service
      - consent-service
      - audit-service

  # Prometheus - Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: securehealth-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - securehealth-network

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: securehealth-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - securehealth-network
    depends_on:
      - prometheus

volumes:
  mongodb_data:
  postgres_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  securehealth-network:
    driver: bridge
