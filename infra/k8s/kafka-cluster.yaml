apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: securehealth-kafka
  namespace: securehealth
spec:
  kafka:
    version: 3.5.0
    replicas: 3
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
      - name: external
        port: 9094
        type: route
        tls: true
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      default.replication.factor: 3
      min.insync.replicas: 2
      inter.broker.protocol.version: "3.5"
      auto.create.topics.enable: false
      log.retention.hours: 168  # 7 days
      log.retention.bytes: 1073741824  # 1GB
      log.segment.bytes: 1073741824  # 1GB
      num.partitions: 12
      log.cleanup.policy: delete
      compression.type: snappy
      message.max.bytes: 10485760  # 10MB
      replica.fetch.max.bytes: 10485760  # 10MB
      socket.request.max.bytes: 104857600  # 100MB
    storage:
      type: persistent-claim
      size: 100Gi
      class: fast-ssd
      deleteClaim: false
    resources:
      requests:
        memory: 2Gi
        cpu: 1000m
      limits:
        memory: 4Gi
        cpu: 2000m
    jvmOptions:
      -Xms: 1g
      -Xmx: 3g
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    template:
      pod:
        metadata:
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "9404"
            prometheus.io/path: "/metrics"
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 10Gi
      class: fast-ssd
      deleteClaim: false
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
    jvmOptions:
      -Xms: 256m
      -Xmx: 512m
  entityOperator:
    topicOperator: {}
    userOperator: {}
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: document.events
  namespace: securehealth
  labels:
    strimzi.io/cluster: securehealth-kafka
spec:
  partitions: 12
  replicas: 3
  config:
    retention.ms: 604800000  # 7 days
    segment.ms: 3600000  # 1 hour
    cleanup.policy: delete
    compression.type: snappy
    min.insync.replicas: 2
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: patient.events
  namespace: securehealth
  labels:
    strimzi.io/cluster: securehealth-kafka
spec:
  partitions: 8
  replicas: 3
  config:
    retention.ms: 2592000000  # 30 days
    segment.ms: 3600000
    cleanup.policy: delete
    compression.type: snappy
    min.insync.replicas: 2
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: hospital.events
  namespace: securehealth
  labels:
    strimzi.io/cluster: securehealth-kafka
spec:
  partitions: 6
  replicas: 3
  config:
    retention.ms: 2592000000  # 30 days
    segment.ms: 3600000
    cleanup.policy: delete
    compression.type: snappy
    min.insync.replicas: 2
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: blockchain.events
  namespace: securehealth
  labels:
    strimzi.io/cluster: securehealth-kafka
spec:
  partitions: 10
  replicas: 3
  config:
    retention.ms: 2592000000  # 30 days
    segment.ms: 3600000
    cleanup.policy: delete
    compression.type: snappy
    min.insync.replicas: 2
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: claims.events
  namespace: securehealth
  labels:
    strimzi.io/cluster: securehealth-kafka
spec:
  partitions: 8
  replicas: 3
  config:
    retention.ms: 2592000000  # 30 days
    segment.ms: 3600000
    cleanup.policy: delete
    compression.type: snappy
    min.insync.replicas: 2
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: notification.events
  namespace: securehealth
  labels:
    strimzi.io/cluster: securehealth-kafka
spec:
  partitions: 6
  replicas: 3
  config:
    retention.ms: 604800000  # 7 days
    segment.ms: 3600000
    cleanup.policy: delete
    compression.type: snappy
    min.insync.replicas: 2
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: system.events
  namespace: securehealth
  labels:
    strimzi.io/cluster: securehealth-kafka
spec:
  partitions: 4
  replicas: 3
  config:
    retention.ms: 259200000  # 3 days
    segment.ms: 3600000
    cleanup.policy: delete
    compression.type: snappy
    min.insync.replicas: 2
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-metrics
  namespace: securehealth
data:
  kafka-metrics-config.yml: |
    lowercaseOutputName: true
    rules:
    # MBean: kafka.server<type=BrokerTopicMetrics, name=MessagesInPerSec, topic=*><>Count
    - pattern: kafka.server<type=BrokerTopicMetrics, name=(.+)PerSec, topic=(.+)><>Count
      name: kafka_server_broker_topic_metrics_$1_total
      type: COUNTER
      labels:
        topic: "$2"
    # MBean: kafka.server<type=BrokerTopicMetrics, name=BytesInPerSec, topic=*><>OneMinuteRate
    - pattern: kafka.server<type=BrokerTopicMetrics, name=(.+)PerSec, topic=(.+)><>OneMinuteRate
      name: kafka_server_broker_topic_metrics_$1_per_sec
      type: GAUGE
      labels:
        topic: "$2"
    # MBean: kafka.server<type=ReplicaManager, name=PartitionCount, topic=*><>Value
    - pattern: kafka.server<type=ReplicaManager, name=(.+)><>Value
      name: kafka_server_replica_manager_$1
      type: GAUGE
    # MBean: kafka.controller<type=KafkaController, name=ActiveControllerCount><>Value
    - pattern: kafka.controller<type=KafkaController, name=(.+)><>Value
      name: kafka_controller_$1
      type: GAUGE
---
apiVersion: v1
kind: Service
metadata:
  name: securehealth-kafka-bootstrap
  namespace: securehealth
  labels:
    app: kafka
spec:
  type: ClusterIP
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: plain
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: tls
  selector:
    strimzi.io/cluster: securehealth-kafka
    strimzi.io/kind: Kafka
    strimzi.io/name: securehealth-kafka-kafka

