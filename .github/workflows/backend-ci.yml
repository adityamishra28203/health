name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, testing-phase, develop ]
    paths:
      - 'services/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, testing-phase ]
    paths:
      - 'services/**'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/hospital-service

jobs:
  # Hospital Service CI
  hospital-service-ci:
    name: Hospital Service CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services/hospital-service
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/hospital-service/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm run test
        env:
          MONGODB_URI: mongodb://localhost:27017/hospital-service-test
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          MONGODB_URI: mongodb://localhost:27017/hospital-service-e2e
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: hospital-service-test-results
          path: services/hospital-service/test-results/
          retention-days: 7

  # Build Hospital Service
  build-hospital-service:
    name: Build Hospital Service
    runs-on: ubuntu-latest
    needs: hospital-service-ci
    defaults:
      run:
        working-directory: ./services/hospital-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/hospital-service/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hospital-service-build
          path: services/hospital-service/dist/
          retention-days: 7

  # Docker Build - Hospital Service
  docker-build-hospital:
    name: Build Hospital Service Docker Image
    runs-on: ubuntu-latest
    needs: build-hospital-service
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/hospital-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Multi-Service Docker Build
  build-all-services:
    name: Build All Services
    runs-on: ubuntu-latest
    needs: [docker-build-hospital]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [audit-service, consent-service, notification-service]
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build-hospital, build-all-services]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build-hospital, build-all-services]
    if: github.event_name == 'push'
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd services/hospital-service
          npm ci

      - name: Run integration tests
        run: |
          cd services/hospital-service
          npm run test:integration
        env:
          MONGODB_URI: mongodb://localhost:27017/hospital-service-integration
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test
          HOSPITAL_API_URL: http://localhost:3003

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, integration-tests]
    if: github.ref == 'refs/heads/testing-phase' || github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying backend services to staging..."
          echo "Hospital Service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          echo "Other Services: ${{ env.REGISTRY }}/${{ github.repository }}/[service]:${{ github.ref_name }}"
          
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          echo "‚úÖ Backend deployment to staging completed"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying backend services to production..."
          echo "Hospital Service: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Other Services: ${{ env.REGISTRY }}/${{ github.repository }}/[service]:latest"
          
          # Add your production deployment commands here
          echo "‚úÖ Backend deployment to production completed"

  # Notify Deployment
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Notify Slack
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üè• Backend Deployment ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
