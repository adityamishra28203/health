name: Security Scanning Pipeline

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, testing-phase ]
    paths:
      - 'services/**'
      - 'frontend/**'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [ main, testing-phase ]

env:
  REGISTRY: ghcr.io

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/docker
            p/kubernetes
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [frontend, services/hospital-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci

      - name: Run npm audit
        working-directory: ./${{ matrix.project }}
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true
          
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: audit-results-${{ matrix.project }}
          path: ${{ matrix.project }}/audit-results.json

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        working-directory: ./${{ matrix.project }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        image: 
          - name: hospital-portal-frontend
            path: frontend
          - name: hospital-service
            path: services/hospital-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.image.path }}
          push: false
          tags: ${{ matrix.image.name }}:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image.name }}:security-scan
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image.name }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.image.name }}.sarif'

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ matrix.image.name }}:security-scan
          only-severities: critical,high
          format: sarif
          output: docker-scout-${{ matrix.image.name }}.sarif
        env:
          DOCKER_SCOUT_TOKEN: ${{ secrets.DOCKER_SCOUT_TOKEN }}

      - name: Upload Docker Scout results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'docker-scout-${{ matrix.image.name }}.sarif'

  # Infrastructure Security Scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes,dockerfile,terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

      - name: Run Terrascan
        uses: accurics/terrascan-action@main
        with:
          iac_type: k8s
          iac_version: v1
          policy_type: k8s
          scan_path: ./k8s
          sarif_upload: true

  # License Compliance Check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run license checker for frontend
        working-directory: ./frontend
        run: |
          npm install -g license-checker
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' --json > license-report-frontend.json || true

      - name: Run license checker for backend
        working-directory: ./services/hospital-service
        run: |
          npm install -g license-checker
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' --json > license-report-backend.json || true

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            frontend/license-report-frontend.json
            services/hospital-service/license-report-backend.json

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Security Policy Compliance
  policy-compliance:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security policy files
        run: |
          echo "🔍 Checking security policy compliance..."
          
          # Check if security.md exists
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ SECURITY.md file not found"
            exit 1
          fi
          
          # Check if .github/SECURITY.md exists
          if [ ! -f ".github/SECURITY.md" ]; then
            echo "❌ .github/SECURITY.md file not found"
            exit 1
          fi
          
          # Check if .gitignore has security-related entries
          if ! grep -q "\.env" .gitignore; then
            echo "⚠️  .env files not in .gitignore"
          fi
          
          if ! grep -q "secrets" .gitignore; then
            echo "⚠️  secrets not in .gitignore"
          fi
          
          echo "✅ Security policy compliance check completed"

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-scan, container-scan, infrastructure-scan, license-check, secrets-scan, policy-compliance]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Job Status" >> security-report.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-report.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
          echo "- Policy Compliance: ${{ needs.policy-compliance.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Summary" >> security-report.md
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.dependency-scan.result }}" == "success" && 
                "${{ needs.container-scan.result }}" == "success" && 
                "${{ needs.infrastructure-scan.result }}" == "success" && 
                "${{ needs.license-check.result }}" == "success" && 
                "${{ needs.secrets-scan.result }}" == "success" && 
                "${{ needs.policy-compliance.result }}" == "success" ]]; then
            echo "✅ All security checks passed!" >> security-report.md
          else
            echo "❌ Some security checks failed. Please review the results." >> security-report.md
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Notify security team
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#security'
          text: |
            🔒 Security Scan ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Report: Check GitHub Actions for detailed results
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
